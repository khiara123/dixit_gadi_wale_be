#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-backend:server');
var http = require('http');
const config =  require('../config');
const dbDisconnect = require('../db/dbConfig');

/**
 * Get port from environment and store in Express.
 */
console.log(`NODE_ENV=${config.NODE_ENV}`);
var port = normalizePort(config.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
// Grace full shout down the system
//similar code we can do in SIGTERM  this signal genrated when we kill the process 
// SIGINT -- genrate when we do the Ctrl + C in the terminal 
process.on('SIGINT', () => {
  const cleanUp = () => {
    // Clean up other resources like DB connections
    dbDisconnect;
  }

  console.log('Closing server...')

  server.close(() => {
    console.log('Server closed !!! ')
    cleanUp()
    process.exit()
  })

  // // Force close server after 5secs
  // setTimeout((e) => {
  //   console.log('Forcing server close !!!', e)

  //   cleanUp()
  //   process.exit(1)
  // }, 5000)
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
